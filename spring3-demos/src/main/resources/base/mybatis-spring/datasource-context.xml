<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:mybatis-spring/database.properties"/>

    <!-- 1) 获得数据库连接池对象，并交由 spring 同一管理 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${drivername}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${password}"/>
        <property name="maxActive" value="${max}"/>
        <property name="minIdle" value="${min}"/>
    </bean>

    <!-- 2) 获取 SqlSessionFactory 对象，并交由 spring 管理-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--依赖别的模块,玩一下-->
        <property name="mapperLocations" value="classpath*:mapper/DomainTemplateMapper.xml"/>
    </bean>

    <!-- 3) 可以获取 SqlSession 对象，并交由 spring 管理  用SqlSessionTemplate得到的SqlSession可以不用我们自己操心事务的管理，以及关闭操作-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!-- 给 SqlSessionTemplate 的构造函数赋值-->
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!--4) 还可以搜索有哪些 mapper 实现类，把mapper接口自动配置成 spring 中的-->
    <bean id="scannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.jokang.demo.mbg.gen"/>
    </bean>

    <!-- 加上事务控制-->
    <bean id="mybatisTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="mybatisTransactionManager"/>

    <!-- 可以用tx:advice配置,也可以用@Transactional注解配置 -->
    <!--<tx:advice id="mybatisAdvice" transaction-manager="mybatisTransactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="remove*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="accept*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="reject*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="execute*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="del*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="recover*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="sync*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="start*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="stop*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="import*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="change*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="rollback*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="create*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="replace*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="do*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="modify*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="process*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            <tx:method name="finish*" propagation="REQUIRED" isolation="READ_COMMITTED" timeout="60"/>
            &lt;!&ndash;取消注释将无法使用atlas的读写分离属性，带事务的sql将全部发往master节点&ndash;&gt;
            &lt;!&ndash;<tx:method name="*" propagation="READONLY"/>&ndash;&gt;
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="mybatisPointcut"
                      expression="execution(public * cn.jokang.demo.*.service.*.*(..)))"/>
        <aop:advisor pointcut-ref="mybatisPointcut" advice-ref="mybatisAdvice"/>
    </aop:config>-->
</beans>